"""Plug-In Manager for robot logic modules attaching to the core server application"""
#Importing necessary libraries
import importlib
import importlib.util
import os
from plugins.utils.plugin_interface import PluginInterface
import inspect

#Plug-In Manager handling robot logic
class RobotLogicManager:

    #Initalizes the Plug-In Manager
    def __init__(self):
        #Path is subject to change (improving project structure)
        self.dir_path = os.path.dirname(os.path.realpath(__file__))
        self.plugin_directory = os.path.join(self.dir_path, "plugins")

        #List of all active plugins
        self.plugins = []

        #For the purpose of REST compliance every plugin will receive a token
        self.plugin_mapping = dict()
        

    #Prints all instantiated plugins
    def show_all_running_plugins(self):
        print(PluginInterface.show_all_plugins(PluginInterface))

    #Source: https://gist.github.com/dorneanu/cce1cd6711969d581873a88e0257e312
    #Allows for the dynamic loading of modules
    #This is a very big function
    #It might profit from segmentation
    def load_module(self, path, token):
        #Gets filename from path
        name = os.path.split(path)[-1]
        #Creates a module spec
        spec = importlib.util.spec_from_file_location(name, path)
        #Creates a module from spec
        module = importlib.util.module_from_spec(spec)
        #Importing the Module
        spec.loader.exec_module(module)
        
        #Saving plugin name for easier tracking
        if name not in self.plugins:
            self.plugins.append(name)

        #Creating an instance from the plugin class
        #There should be only one class inheriting from PluginInterface
        for name, object in inspect.getmembers(module):
        # Check if the object is a class and subclasses PluginInterface
            if inspect.isclass(object) and issubclass(object, PluginInterface) and object != PluginInterface:
                # Instantiate the class
                plugin_instance = object()
    
        #Token generated by the TokenGenerator should be passed as an argument
        #Creates a mapping of token to plugin
        #Allows the server to retrieve running instances of plugins for every client  
        self.plugin_mapping[token] = plugin_instance
        
        #Loud thinking: This is a file/class -> rather return a concrete instance
        #There should be a separate method for retrieving modules
        return plugin_instance
    
    def instantiate_plugin():
        pass

    def register_plugin():
        pass

#Test
rlm = RobotLogicManager()
module = rlm.load_module("/Users/dennispal00/Documents/Masterarbeit_THI/REST_AI_Server/packages/plugins/prototypes/test_plugin.py", "78488844")
print(module.run())

        